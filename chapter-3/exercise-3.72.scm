(define (square x) (* x x))
(define (sum-squares-weight x)
  (+ (square (car x)) (square (cadr x))))
(define sum-squares (weighted-pairs integers integers sum-squares-weight))
(define (sum-square-three x)
  (let ((this-weight (sum-squares-weight (stream-car x)))
        (next-weight (sum-squares-weight (stream-car (stream-cdr x))))
        (third-weight (sum-squares-weight (stream-car (stream-cdr (stream-cdr x))))))
    (cond ((= this-weight next-weight third-weight)
           (cons-stream this-weight (sum-square-three (stream-cdr x))))
          (else (sum-square-three (stream-cdr x))))))
(define int-sum-squares-three (sum-square-three sum-squares))
(display (stream-ref int-sum-squares-three 0))(newline)
(display (stream-ref int-sum-squares-three 1))(newline)
(display (stream-ref int-sum-squares-three 2))(newline)
(display (stream-ref int-sum-squares-three 3))(newline)
(display (stream-ref int-sum-squares-three 4))(newline)
(display (stream-ref int-sum-squares-three 5))(newline)
