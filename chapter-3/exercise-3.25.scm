(define (assoc key records)
  (cond ((null? records) false)
        ((equal? key (caar records)) (car records))
        (else (assoc key (cdr records)))))
(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup keys)
      (define (iter keys table)
        (let ((key (car keys))
              (keys-left (cdr keys)))
          (if (null? keys-left)
            (let ((record (assoc key (cdr table))))
              (if record (cdr record) false))
            (let ((subtable (assoc key (cdr table))))
              (iter keys-left subtable)))))
      (iter keys local-table))
    (define (insert! keys value)
      (define (iter keys table)
        (let ((key (car keys))
              (keys-left (cdr keys)))
          (if (null? table)
            (if (null? keys-left)
              (cons key value)
              (list key (iter keys-left nil)))
            (if (null? keys-left)
              (let ((record (assoc key (cdr table))))
                (if record
                  (set-cdr! record value)
                  (set-cdr! table
                            (cons (cons key value)
                                  (cdr table)))))
              (let ((subtable (assoc key (cdr table))))
                (if subtable
                  (iter keys-left subtable)
                  (set-cdr! table
                            (cons (list key (iter keys-left nil))
                                  (cdr table)))))))))
      (iter keys local-table)
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (error "unknown operation: TABLE" m))))
    dispatch))
