(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
           (make-product (exponent exp)
                         (make-exponentiation
                           (base exp)
                           (make-sum -1 (exponent exp))))
           (deriv (base exp) var)))
        (else
          (error "unknown expression type: DERIV" exp))))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        (else (list '* m1 m2))))
(define (multiplicand p)
  (cond ((= (length (cddr p)) 1) (caddr p))
        (else (make-product (caddr p) (cadddr p)))))
(define (augend s)
  (cond ((= (length (cddr s)) 1) (caddr s))
        (else (make-sum (caddr s) (cadddr s)))))


(deriv '(+ x y) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)
(deriv '(* x y (+ x 3)) 'x)
(deriv '(* x y (+ x 3 7)) 'x)
(deriv '(** (* x y) 3) 'x)
