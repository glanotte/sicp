; b
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) 1 0)
        (else ((get 'deriv (operator exp)) (operands exp) var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        (else (list '* m1 m2))))

(define (install-sum-deriv)
  (define (addend s) (cadr s))
  (define (augend s) (caddr s))
  (define (deriv exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))

  (put 'deriv '(+) deriv)
  'done)

(define (install-product-deriv)
  (define (multiplier p) (cadr p))
  (define (multiplicand p) (caddr p))
  (define (deriv exp var)
    (make-sum
      (make-product (multiplier exp)
                    (deriv (multiplicand exp) var))
      (make-product (deriv (multiplier exp) var)
                    (multiplicand exp))))
  'done)


; c
(define (install-exponentiation-deriv)
  (define (base e) (cadr e))
  (define (exponent e) (caddr e))
  (define (make-exponentiation b e)
    (cond ((=number? e 0) 1)
          ((=number? e 1) b)
          ((and (number? e) (number? b)) (expt b e))
          (else (list `** b e))))
  (make-product
   (make-product (exponent exp)
                  (make-exponentiation
                    (base exp)
                    (make-sum -1 (exponent exp))))
    (deriv (base exp) var)))
