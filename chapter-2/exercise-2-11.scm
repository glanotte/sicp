(define (new-mul-interval x y)
  (let ((lb-x (lower-bound x))
        (ub-x (upper-bound x))
        (lb-y (lower-bound y))
        (ub-y (upper-bound y)))
    (cond ((< 0 lb-x ub-x)
           (cond ((< 0 lb-y ub-y)
                  (make-interval (* lb-x lb-y) (* ub-x ub-y)))
                 ((< lb-y ub-y 0)
                  (make-interval (* ub-x lb-y) (* lb-x ub-y)))
                 (else make-interval (* ub-x lb-y) (* ub-x ub-y))))
          ((< lb-x ub-x 0)
           (cond ((< 0 lb-y ub-y)
                  (make-interval (* lb-x lb-y) (* ub-x lb-y)))
                 ((< lb-y ub-y 0)
                  (make-interval (* ub-x ub-y) (* lb-x lb-y)))
                 (else make-interval (* lb-x ub-y) (* lb-x lb-y))))
          (else
            (cond ((< 0 lb-y ub-y)
                   (make-interval (* lb-x ub-y) (* ub-x ub-y)))
                  ((< lb-y ub-y 0)
                   (make-interval (* ub-x lb-y) (* lb-x lb-y)))
                  (else (make-interval (min (* lb-x ub-y) (* ub-x ub-y))
                                       (max (* lb-x lb-y) (* ub-x ub-y))))))))))

